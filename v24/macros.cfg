[include ./clean_nozzle.cfg]                  # nozzle_clean and purge

[gcode_macro MESSAGE]
gcode:
  {% set msg = params.MSG %}
  RESPOND PREFIX= MSG="{msg}"
  M117 {msg}

#####################################################################
#	Macros
#####################################################################

[gcode_macro G32]
gcode:
    MESSAGE MSG="Homing and QGL..."
    BED_MESH_CLEAR
    CG28
    ATTACH_PROBE_LOCK
    CQGL
    G0 X150 Y150 Z30 F7200


# Conditional Homing
[gcode_macro CG28]
gcode:
    {% if "xyz" not in printer.toolhead.homed_axes %}
        G28
    {% endif %}

# Conditional QGL
[gcode_macro CQGL]
gcode:
    {% if printer.quad_gantry_level.applied == False %}
        QUAD_GANTRY_LEVEL
        G28 Z
    {% endif %}

[gcode_macro PRINT_START]
#   Use PRINT_START for the slicer starting script - please customise for your slicer of choice
gcode:
  {% set e = params.E|default(15.1)|float %} #edit to your retract length
  {% set BED_TEMP = params.BED|default(55)|float %}
  {% set EXTRUDER_TEMP = params.EXTRUDER|default(200)|float %}
  {% set Z_OFFSET = params.Z_OFFSET|default(-0.00)|float %}
  {% set SPEED_PERC = params.SPEED_PERC|default(100)|int %}
  {% set FLOW_PERC = params.FLOW_PERC|default(100)|int %}
  {% set PA = params.PA|default(0.035)|float %}
  {% set DWELL = params.DWELL|default(000000)|int %}

  MESSAGE MSG="Bed Heating..."
  SET_HEATER_TEMPERATURE HEATER=heater_bed TARGET={BED_TEMP}
  # Home the printer
  G32
  # Use absolute coordinates
  G21 ; set units to millimeters
  G90

  MESSAGE MSG="Heat Soak..."
  G4 P{DWELL} # Wait 10 minutes for the bed to stabilise
  MESSAGE MSG="Extruder Heating..."
  G92 E0 ; Reset Extruder
  M109 S{EXTRUDER_TEMP}
  ATTACH_PROBE_LOCK
  clean_nozzle
  G28 Z
  CALIBRATE_Z
  MESSAGE MSG="Bed Mesh..."
  BED_MESH_CALIBRATE
  DOCK_PROBE_UNLOCK
  # SET_GCODE_OFFSET Z_ADJUST={Z_OFFSET}
  MESSAGE MSG="Priming..."
  G1 E{e} F3000
  G1 X60   Y5 Z0.3 F5000.0
  G1 X200  Y5 F1500.0 E14
  G1 X200  Y5.3 Z0.3 F5000.0
  G1 X50.3 Y5.3 Z0.3 F1500.0 E21
  G1 Z2 F3000
  G92 E0 ; Reset Extruder
  M220 S{SPEED_PERC}
  M221 S{FLOW_PERC}
  SET_PRESSURE_ADVANCE ADVANCE={PA}
  #M400
  G90 ; use absolute coordinates
  M83 ; use relative distances for extrusion
  MESSAGE MSG="Printing..."

[gcode_macro PRINT_END]
#   Use PRINT_END for the slicer ending script - please customise for your slicer of choice
gcode:
    M400                           ; wait for buffer to clear
    G92 E0                         ; zero the extruder
    SAFE_Z_PARK
    TURN_OFF_HEATERS
    ; G91                            ; relative positioning
    ; G0 Z1.00 X20.0 Y20.0 F20000    ; move nozzle to remove stringing
    M107
    BED_MESH_CLEAR
    MESSAGE MSG=""


## 	Common Temperature Sensors
##   "EPCOS 100K B57560G104F"
##   "ATC Semitec 104GT-2"
##   "NTC 100K beta 3950"
##   "Honeywell 100K 135-104LAG-J01"
##   "NTC 100K MGB18-104F39050L32" (Keenovo Heater Pad)
##   "AD595"
##   "PT100 INA826"
##   "PT1000"

[gcode_macro OFF]
gcode:
    M84                                  ; turn steppers off
    TURN_OFF_HEATERS                     ; turn bed / hotend off
    M107                                 ; turn print cooling fan off
    #SET_FAN_SPEED FAN=Exhaust SPEED=0   ; turn exhaust fan off
    #SET_FAN_SPEED FAN=BedFans SPEED=0   ; bed fan off
    #SET_PIN PIN=caselight VALUE=0       ; turn case light off

# Shutdown the rpi
[gcode_macro SHUTDOWN]
gcode:
    LCDRGB R=0 G=0 B=0                               ; Turn off LCD neopixels (see above for this macro)
    OFF                                              ; Shortcut to turn everything off (see above for this macro)
    {action_respond_info('action:poweroff')}          ; OctoPrint compatible host shutdown
    {action_call_remote_method("shutdown_machine")}   ; moonraker compatible host shutdown

[menu __main __control __shutdown]
type: command
enable: {not printer.idle_timeout.state == "Printing"}
name: Shut down
gcode: SHUTDOWN

[menu __main __setup __calib __qgl]
type: command
enable: {not printer.idle_timeout.state == "Printing"}
name: QGL
gcode: QUAD_GANTRY_LEVEL

## RGB

[gcode_macro LCDRGB]
gcode:
    {% set r = params.R|default(1)|float %}
    {% set g = params.G|default(1)|float %}
    {% set b = params.B|default(1)|float %}

    SET_LED LED=lcd RED={r} GREEN={g} BLUE={b} INDEX=1 TRANSMIT=0
    SET_LED LED=lcd RED={r} GREEN={g} BLUE={b} INDEX=2 TRANSMIT=0
    SET_LED LED=lcd RED={r} GREEN={g} BLUE={b} INDEX=3

[gcode_macro RESETRGB]
gcode:
    SET_LED LED=lcd RED=1 GREEN=0.45 BLUE=0.4 INDEX=1 TRANSMIT=0
    SET_LED LED=lcd RED=0.25 GREEN=0.2 BLUE=0.15 INDEX=2 TRANSMIT=0
    SET_LED LED=lcd RED=0.25 GREEN=0.2 BLUE=0.15 INDEX=3

[delayed_gcode SETDISPLAYNEOPIXEL]
initial_duration: 1
gcode:
    RESETRGB
