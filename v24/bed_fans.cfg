#######>>>>>>>>>>  3DPrintDemon  <<<<<<<<<<<#######
#######   https://github.com/3DPrintDemon   #######

######################################################################################################
# USAGE OPTION 2: Stand-alone Macro - NOT used inside the Demon Essentials Macro Pack
######################################################################################################
# Set your sensors & pins in the printer.cfg as shown above.
# Add the below command to anywhere in your start macro (after your bed temp has been set) where you
# want your macro to set the fans. This can be used more than once.

# _BED_FAN_SET

# VERY IMPORTANT! Be sure to enable the Bed Fans Monitor at the very end of your start macro by
# adding the below command to the last line of your start macro:

# UPDATE_DELAYED_GCODE ID=_BED_FAN_MONITOR DURATION=1
# RESPOND TYPE=COMMAND MSG="Bed Fans Monitor Active"

# To test the _BED_FAN_MONITOR system:
# Enable the system by making sure the "variable_enable" is set True
# If using the full Demon Essentials Macro Pack set the above options in the demon_user_settings.cfg
# Be sure you have UPDATE_DELAYED_GCODE ID=_BED_FAN_MONITOR DURATION=1 at the end of your start code.
# If using the full Demon Essentials Macro Pack this is already done.
# Start a quick test print & wait for your start macro to finish & for the printer to start the print proper.
# This is when the monitor comes online & it will modify the bed fans according to print conditions.

[gcode_macro _BED_FAN_VARS]
variable_chamber_threshold: 20                      # Set this to your minimum chamber temp
variable_chamber_temp: 65                           # Set this to your maximum chamber temp
variable_high: 0.55                                 # Set your high speed bed fan setting
variable_low: 0.20                                  # Set your low speed bed fan setting
variable_cool: False                                # Use bed fans to help cool the bed & chamber after printing
variable_cool_temp: 25                              # Temperature to cool down to
variable_enable: True                               # Enable bed fan use True/False
variable_chamber_temp_enable: False                 # Monitor Chamber fan target True/False

###################################################
## DO NOT CHANGE THESE! You will confuse the macro!
variable_readback_value: 0
variable_previous_readback_value: 10
variable_current_fan_speed: 0.0
variable_macro_used: False
###################################################
gcode: # LEAVE THIS SECTION EMPTY

######################################################################################################
# DON'T PLAY WITH STUFF UNDER THIS LINE!

[gcode_macro BED_FANS_SET_SPEED]
gcode:
  {% set low_speed = params.LOW_SPEED_PERCENT|default(20)|float %}
  {% set high_speed = params.HIGH_SPEED_PERCENT|default(65)|float %}

  SET_GCODE_VARIABLE MACRO=_BED_FAN_VARS VARIABLE=macro_used VALUE=True
  SET_GCODE_VARIABLE MACRO=_BED_FAN_VARS VARIABLE=low VALUE={low_speed / 100|float}
  SET_GCODE_VARIABLE MACRO=_BED_FAN_VARS VARIABLE=high VALUE={high_speed / 100|float}


[gcode_macro _BED_FAN_READ]
gcode:
  {% set bed_vars = printer["gcode_macro _BED_FAN_VARS"] %}

    RESPOND TYPE=COMMAND MSG="Bed fans threshold {bed_vars.chamber_threshold}c"
    RESPOND TYPE=COMMAND MSG="Bed fans upper limit {bed_vars.chamber_temp}c"
    RESPOND TYPE=COMMAND MSG="Bed fans high setting {bed_vars.high}"
    RESPOND TYPE=COMMAND MSG="Bed fans low setting {bed_vars.low}"
    RESPOND TYPE=COMMAND MSG="Bed fans Post print cooling {bed_vars.cool}"
    RESPOND TYPE=COMMAND MSG="Bed fans Post print cooling temp {bed_vars.cool_temp}c"
    RESPOND TYPE=COMMAND MSG="Bed fans enable for filament {bed_vars.enable}"

    # RESPOND TYPE=COMMAND MSG="Bed fans readback value {bed_vars.readback_value}"
    RESPOND TYPE=COMMAND MSG="Bed fans prev fan {bed_vars.current_fan_speed}%"


[gcode_macro _BED_FAN_HELPER]
gcode:
  {% set bed_vars = printer["gcode_macro _BED_FAN_VARS"] %}

 {% if bed_vars.readback_value == bed_vars.previous_readback_value %}
   SET_GCODE_VARIABLE MACRO=_BED_FAN_VARS VARIABLE=previous_readback_value VALUE={bed_vars.readback_value}

   {% if bed_vars.chamber_temp_enable == True %}
     SET_GCODE_VARIABLE MACRO=_BED_FAN_VARS VARIABLE=chamber_temp VALUE={printer["temperature_fan chamber"].target}
   {% endif %}

     {% if bed_vars.macro_used == True %}
       RESPOND TYPE=COMMAND MSG="Macro used to change Bed Fan speed"

     {% else %}
       {% if printer["fan_generic Bed_Fans"].speed|float == bed_vars.current_fan_speed %}

       {% elif printer["fan_generic Bed_Fans"].speed|float != bed_vars.current_fan_speed %}

         {% if printer["fan_generic Bed_Fans"].speed|float == 0 %}
             RESPOND TYPE=error MSG="The ZERO percent value can NOT be set or modified. To set fans to off use DISABLE_BED_FANS button!"

         {% elif printer["fan_generic Bed_Fans"].speed|float > 0.1 and printer["fan_generic Bed_Fans"].speed|float < 0.5 %}
           SET_GCODE_VARIABLE MACRO=_BED_FAN_VARS VARIABLE=current_fan_speed VALUE={printer["fan_generic Bed_Fans"].speed|float}
           SET_GCODE_VARIABLE MACRO=_BED_FAN_VARS VARIABLE=low VALUE={printer["fan_generic Bed_Fans"].speed|float}
           RESPOND TYPE=COMMAND MSG="Manual slider speed change of under 0.5 detected, applying to LOW_SPEED setting"

         {% elif printer["fan_generic Bed_Fans"].speed|float >= 0.5 %}
           SET_GCODE_VARIABLE MACRO=_BED_FAN_VARS VARIABLE=current_fan_speed VALUE={printer["fan_generic Bed_Fans"].speed|float}
           SET_GCODE_VARIABLE MACRO=_BED_FAN_VARS VARIABLE=high VALUE={printer["fan_generic Bed_Fans"].speed|float}
           RESPOND TYPE=COMMAND MSG="Manual slider speed change of over 0.5 detected, applying to HIGH_SPEED setting"

         {% endif %}

       {% endif %}

     {% endif %}

 {% elif bed_vars.readback_value != bed_vars.previous_readback_value %}
   SET_GCODE_VARIABLE MACRO=_BED_FAN_VARS VARIABLE=previous_readback_value VALUE={bed_vars.readback_value}

  {% if bed_vars.chamber_temp_enable == True %}
   SET_GCODE_VARIABLE MACRO=_BED_FAN_VARS VARIABLE=chamber_temp VALUE={printer["temperature_fan chamber"].target}
  {% endif %}

   _BED_FAN_MESSAGE_READ

  {% endif %}

    SET_GCODE_VARIABLE MACRO=_BED_FAN_VARS VARIABLE=macro_used VALUE=False


[gcode_macro _MONITOR_FAN_SET]
gcode:

  {% set bed_vars = printer["gcode_macro _BED_FAN_VARS"] %}

  {% if bed_vars.readback_value == 1 %}
    SET_FAN_SPEED FAN=Bed_Fans SPEED=0
  {% elif bed_vars.readback_value == 2 %}
    SET_FAN_SPEED FAN=Bed_Fans SPEED={bed_vars.high}
  {% elif bed_vars.readback_value == 3 %}
    SET_FAN_SPEED FAN=Bed_Fans SPEED={bed_vars.low}
  {% elif bed_vars.readback_value == 4 %}
    SET_FAN_SPEED FAN=Bed_Fans SPEED=0
  {% elif bed_vars.readback_value == 5 %}
    SET_FAN_SPEED FAN=Bed_Fans SPEED=0
  {% elif bed_vars.readback_value == 6 %}
    SET_FAN_SPEED FAN=Bed_Fans SPEED={bed_vars.low}
  {% elif bed_vars.readback_value == 7 %}
    SET_FAN_SPEED FAN=Bed_Fans SPEED=0
  {% elif bed_vars.readback_value == 8 %}
    SET_FAN_SPEED FAN=Bed_Fans SPEED=0
  {% elif bed_vars.readback_value == 9 %}
    SET_FAN_SPEED FAN=Bed_Fans SPEED=0

  {% endif %}




[gcode_macro _BED_FAN_MESSAGE_READ]
gcode:

  {% set bed_vars = printer["gcode_macro _BED_FAN_VARS"] %}

  {% if bed_vars.readback_value == 1 %}
    RESPOND TYPE=COMMAND MSG="Bed Fans Monitor: Printing, too cold fans set to off while bed heats"
  {% elif bed_vars.readback_value == 2 %}
    RESPOND TYPE=COMMAND MSG="Bed Fans Monitor: Printing, temp under chamber threshold fans set to high speed {bed_vars.high * 100}%"
  {% elif bed_vars.readback_value == 3 %}
    RESPOND TYPE=COMMAND MSG="Bed Fans Monitor: Printing, fans set to low speed {bed_vars.low * 100}%"
  {% elif bed_vars.readback_value == 4 %}
    RESPOND TYPE=COMMAND MSG="Bed Fans Monitor: Printing, fans off due to high chamber temp >{bed_vars.chamber_temp|int}c"
  {% elif bed_vars.readback_value == 5 %}
    RESPOND TYPE=COMMAND MSG="Bed Fans Monitor: Paused, fans auto paused"
  {% elif bed_vars.readback_value == 6 %}
    RESPOND TYPE=COMMAND MSG="Bed Fans Monitor: Cooling post print, fans on low until <{bed_vars.cool_temp|int}c or printer state is changed to Standby"
  {% elif bed_vars.readback_value == 7 %}
    RESPOND TYPE=COMMAND MSG="Bed Fans Monitor: Stopped, fans off"
  {% elif bed_vars.readback_value == 8 %}
    RESPOND TYPE=COMMAND MSG="Bed Fans Monitor: Override on, fans manually paused"
  {% elif bed_vars.readback_value == 9 %}
    RESPOND TYPE=COMMAND MSG="Bed Fans Monitor: Stopped, fans off, Override off"

  {% endif %}


[gcode_macro _BED_FAN_SET]
gcode:
  {% set bed_vars = printer["gcode_macro _BED_FAN_VARS"] %}

  {% if bed_vars.enable == True %}

    {% if printer.heater_bed.temperature < printer.heater_bed.target|int -5 %}

        {% if printer["temperature_sensor Chamber_Temp"].temperature <= bed_vars.chamber_temp%}
          SET_FAN_SPEED FAN=Bed_Fans SPEED=0
          RESPOND TYPE=COMMAND MSG="Bed fans off while bed heats"

        {% elif printer["temperature_sensor Chamber_Temp"].temperature > bed_vars.chamber_temp %}
          SET_FAN_SPEED FAN=Bed_Fans SPEED=0
          RESPOND TYPE=COMMAND MSG="Bed fans set to off due to high chamber temp >{bed_vars.chamber_temp}c"

        {% endif %}

    {% elif printer.heater_bed.temperature >= printer.heater_bed.target|int -5 %}

      {% if printer["temperature_sensor Chamber_Temp"].temperature <= bed_vars.chamber_threshold %}
        SET_FAN_SPEED FAN=Bed_Fans SPEED={bed_vars.high}
        RESPOND TYPE=COMMAND MSG="Bed fans set to high speed for Heat Soak {bed_vars.high * 100}%"

      {% elif printer["temperature_sensor Chamber_Temp"].temperature > bed_vars.chamber_threshold %}
        {% if printer["temperature_sensor Chamber_Temp"].temperature <= bed_vars.chamber_temp%}
          SET_FAN_SPEED FAN=Bed_Fans SPEED={bed_vars.low}
          RESPOND TYPE=COMMAND MSG="Bed fans set to low speed {bed_vars.low * 100}%"

        {% elif printer["temperature_sensor Chamber_Temp"].temperature > bed_vars.chamber_temp %}
          SET_FAN_SPEED FAN=Bed_Fans SPEED=0
          RESPOND TYPE=COMMAND MSG="Bed fans set to off due to high chamber temp >{bed_vars.chamber_temp}c"

        {% endif %}

      {% endif %}

    {% endif %}

  {% else %}
    RESPOND TYPE=COMMAND MSG="Bed Fans disabled in settings"

  {% endif %}


[delayed_gcode _BED_FAN_MONITOR]
gcode:
  {% set bed_vars = printer["gcode_macro _BED_FAN_VARS"] %}

  {% if bed_vars.enable == True %}
    {% if printer["output_pin DISABLE_BED_FANS"].value == 0 %}
      {% if printer.print_stats.state == "printing" %}
        {% if printer["temperature_sensor Chamber_Temp"].temperature < bed_vars.chamber_threshold %}
          {% if printer.heater_bed.temperature <= printer.heater_bed.target|int -5 %}
            SET_GCODE_VARIABLE MACRO=_BED_FAN_VARS VARIABLE=readback_value VALUE=1 ##
            SET_GCODE_VARIABLE MACRO=_BED_FAN_VARS VARIABLE=current_fan_speed VALUE=0
            _BED_FAN_HELPER ##
            _MONITOR_FAN_SET
            UPDATE_DELAYED_GCODE ID=_BED_FAN_MONITOR DURATION=10
            # RESPOND TYPE=COMMAND MSG="Bed is too cold, fans set to off to warm up!"

          {% else %}
            SET_GCODE_VARIABLE MACRO=_BED_FAN_VARS VARIABLE=readback_value VALUE=2 ##
            SET_GCODE_VARIABLE MACRO=_BED_FAN_VARS VARIABLE=current_fan_speed VALUE={bed_vars.high}
            _BED_FAN_HELPER ##
            _MONITOR_FAN_SET
            UPDATE_DELAYED_GCODE ID=_BED_FAN_MONITOR DURATION=10
            #  RESPOND TYPE=COMMAND MSG="Bed fans monitor printing, temp under chamber threshold fans set to high speed {bed_vars.high}"

          {% endif %}

        {% elif printer["temperature_sensor Chamber_Temp"].temperature >= bed_vars.chamber_threshold %}
          {% if printer.heater_bed.temperature <= printer.heater_bed.target|int -5 %}
            SET_GCODE_VARIABLE MACRO=_BED_FAN_VARS VARIABLE=readback_value VALUE= 1 ##
            SET_GCODE_VARIABLE MACRO=_BED_FAN_VARS VARIABLE=current_fan_speed VALUE=0
             _BED_FAN_HELPER ##
            _MONITOR_FAN_SET
            UPDATE_DELAYED_GCODE ID=_BED_FAN_MONITOR DURATION=10
            # RESPOND TYPE=COMMAND MSG="Bed is too cold, fans set to off to warm up!"

          {% elif printer["temperature_sensor Chamber_Temp"].temperature <= bed_vars.chamber_temp %}
            SET_GCODE_VARIABLE MACRO=_BED_FAN_VARS VARIABLE=readback_value VALUE=3 ##
            SET_GCODE_VARIABLE MACRO=_BED_FAN_VARS VARIABLE=current_fan_speed VALUE={bed_vars.low}
            _BED_FAN_HELPER ##
            _MONITOR_FAN_SET
            UPDATE_DELAYED_GCODE ID=_BED_FAN_MONITOR DURATION=10
            #  RESPOND TYPE=COMMAND MSG="Bed fans monitor printing, fans set to low speed {bed_vars.low}"

          {% elif printer["temperature_sensor Chamber_Temp"].temperature > bed_vars.chamber_temp %}
            SET_GCODE_VARIABLE MACRO=_BED_FAN_VARS VARIABLE=readback_value VALUE=4 ##
            SET_GCODE_VARIABLE MACRO=_BED_FAN_VARS VARIABLE=current_fan_speed VALUE=0
            _BED_FAN_HELPER ##
            _MONITOR_FAN_SET
            UPDATE_DELAYED_GCODE ID=_BED_FAN_MONITOR DURATION=10
            #   RESPOND TYPE=COMMAND MSG="Bed fans monitor printing, fans off due to high chamber temp >{bed_vars.chamber_temp}"

          {% else %}
            M118 oops
            UPDATE_DELAYED_GCODE ID=_BED_FAN_MONITOR DURATION=10

          {% endif %}

        {% endif %}

      {% elif printer.print_stats.state == "paused" %}
        SET_GCODE_VARIABLE MACRO=_BED_FAN_VARS VARIABLE=readback_value VALUE=5 ##
        SET_GCODE_VARIABLE MACRO=_BED_FAN_VARS VARIABLE=current_fan_speed VALUE=0
        _BED_FAN_HELPER ##
        _MONITOR_FAN_SET
        UPDATE_DELAYED_GCODE ID=_BED_FAN_MONITOR DURATION=5
        #   RESPOND TYPE=COMMAND MSG="Bed fans monitor paused, fans paused"

      {% elif printer.print_stats.state in ["complete", "cancelled", "error"] %}
        {% if bed_vars.cool == True and printer["temperature_sensor Chamber_Temp"].temperature >= bed_vars.cool_temp %}
          SET_GCODE_VARIABLE MACRO=_BED_FAN_VARS VARIABLE=readback_value VALUE=6 ##
          SET_GCODE_VARIABLE MACRO=_BED_FAN_VARS VARIABLE=current_fan_speed VALUE={bed_vars.low}
          _BED_FAN_HELPER ##
          _MONITOR_FAN_SET
          UPDATE_DELAYED_GCODE ID=_BED_FAN_MONITOR DURATION=10
          #   RESPOND TYPE=COMMAND MSG="Bed fans monitor cooling post print, fans low"

        {% else %}
          SET_GCODE_VARIABLE MACRO=_BED_FAN_VARS VARIABLE=readback_value VALUE=7 ##
          SET_GCODE_VARIABLE MACRO=_BED_FAN_VARS VARIABLE=current_fan_speed VALUE=0
          _BED_FAN_HELPER ##
          _MONITOR_FAN_SET
          UPDATE_DELAYED_GCODE ID=_BED_FAN_MONITOR DURATION=0
          #   RESPOND TYPE=COMMAND MSG="Bed fans monitor stop, fans off"

        {% endif %}

      {% elif printer.print_stats.state == "standby" %}
        SET_GCODE_VARIABLE MACRO=_BED_FAN_VARS VARIABLE=readback_value VALUE=7 ##
        SET_GCODE_VARIABLE MACRO=_BED_FAN_VARS VARIABLE=current_fan_speed VALUE=0
        _BED_FAN_HELPER ##
        _MONITOR_FAN_SET
        UPDATE_DELAYED_GCODE ID=_BED_FAN_MONITOR DURATION=0
        #   RESPOND TYPE=COMMAND MSG="Bed fans monitor stop, fans off"

      {% endif %}

    {% elif printer["output_pin DISABLE_BED_FANS"].value == 1.0 %}
      {% if printer.print_stats.state in  ["printing", "paused"] %}
        SET_GCODE_VARIABLE MACRO=_BED_FAN_VARS VARIABLE=readback_value VALUE=8 ##
        SET_GCODE_VARIABLE MACRO=_BED_FAN_VARS VARIABLE=current_fan_speed VALUE=0
        _BED_FAN_HELPER ##
        _MONITOR_FAN_SET
        UPDATE_DELAYED_GCODE ID=_BED_FAN_MONITOR DURATION=10
        #   RESPOND TYPE=COMMAND MSG="Bed fans monitor override on, fans paused"

      {% elif printer.print_stats.state in ["complete", "cancelled", "error"] %}
        {% if bed_vars.cool == True and printer["temperature_sensor Chamber_Temp"].temperature >= bed_vars.cool_temp %}
          SET_GCODE_VARIABLE MACRO=_BED_FAN_VARS VARIABLE=readback_value VALUE=6 ##
          SET_GCODE_VARIABLE MACRO=_BED_FAN_VARS VARIABLE=current_fan_speed VALUE={bed_vars.low}
          _BED_FAN_HELPER ##
          _MONITOR_FAN_SET
          UPDATE_DELAYED_GCODE ID=_BED_FAN_MONITOR DURATION=10
          SET_PIN PIN=DISABLE_BED_FANS VALUE=0.00
          #   RESPOND TYPE=COMMAND MSG="Bed fans monitor cooling post print, fans low"

        {% else %}
          SET_GCODE_VARIABLE MACRO=_BED_FAN_VARS VARIABLE=readback_value VALUE=9 ##
          SET_GCODE_VARIABLE MACRO=_BED_FAN_VARS VARIABLE=current_fan_speed VALUE=0
          _BED_FAN_HELPER ##
          _MONITOR_FAN_SET
          UPDATE_DELAYED_GCODE ID=_BED_FAN_MONITOR DURATION=0
          SET_PIN PIN=DISABLE_BED_FANS VALUE=0.00
          #   RESPOND TYPE=COMMAND MSG="Bed fans monitor stop, fans off, Override off"

        {% endif %}

      {% elif printer.print_stats.state == "standby" %}
        SET_GCODE_VARIABLE MACRO=_BED_FAN_VARS VARIABLE=readback_value VALUE=9 ##
        SET_GCODE_VARIABLE MACRO=_BED_FAN_VARS VARIABLE=current_fan_speed VALUE=0
        _BED_FAN_HELPER ##
        _MONITOR_FAN_SET
        UPDATE_DELAYED_GCODE ID=_BED_FAN_MONITOR DURATION=0
        SET_PIN PIN=DISABLE_BED_FANS VALUE=0.00
        #   RESPOND TYPE=COMMAND MSG="Bed fans monitor stop, fans off, Override off"

      {% endif %}

    {% else %}
      UPDATE_DELAYED_GCODE ID=_BED_FAN_MONITOR DURATION=10
      #   RESPOND TYPE=COMMAND MSG="Monitor going round again"

    {% endif %}

  {% else %}
    RESPOND TYPE=error MSG="Bed Fans disabled in settings"

  {% endif %}




[gcode_macro _BF_VERSION]
variable_demon_bf: 1.1
gcode:


